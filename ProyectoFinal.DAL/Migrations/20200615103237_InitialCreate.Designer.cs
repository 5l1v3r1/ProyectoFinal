// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoFinal.DAL;

namespace ProyectoFinal.DAL.Migrations
{

    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200615103237_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Malware_Id")
                        .HasColumnType("int");

                    b.Property<string>("TextComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Malware_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.BehaviorSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Behavior_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Behavior_Id");

                    b.ToTable("BehaviorSummaries");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooBehavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckooInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuckooInfoId");

                    b.ToTable("CuckooBehaviors");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooDropped", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckooScanId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("crc32")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("md5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooScanId");

                    b.ToTable("CuckooDroppeds");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuckooScanId")
                        .HasColumnType("int");

                    b.Property<string>("MD5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MalwareId")
                        .HasColumnType("int");

                    b.Property<int>("Malware_Id")
                        .HasColumnType("int");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MalwareId");

                    b.ToTable("CuckooInfos");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckooScanId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Markcount")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuckooScanId");

                    b.ToTable("CuckooSignatures");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooStatic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckooScanId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.Property<int>("ImportedDllCount")
                        .HasColumnType("int");

                    b.Property<string>("PeImphash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CuckooScanId");

                    b.ToTable("CuckooStatics");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooStrings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckoScanId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.Property<string>("Strings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckoScanId");

                    b.ToTable("CuckooStrings");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckoScanId")
                        .HasColumnType("int");

                    b.Property<int>("CuckooScan_Id")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Ssdeep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("crc32")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("md5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckoScanId");

                    b.ToTable("CuckooTargets");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.DroppedPids", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dropped_Id")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dropped_Id");

                    b.ToTable("DroppedPids");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.DroppedUrls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuckooDroppedId")
                        .HasColumnType("int");

                    b.Property<int>("Dropped_Id")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooDroppedId");

                    b.ToTable("DroppedUrls");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Exports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeExport_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeExport_Id");

                    b.ToTable("Exports");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Imports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeImport_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeImport_Id");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ioc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Siganture_Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Siganture_Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkArguments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Access")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AllocationType")
                        .HasColumnType("bigint");

                    b.Property<string>("BaseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FreeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("KeyHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Length")
                        .HasColumnType("bigint");

                    b.Property<int>("MarkCall_Id")
                        .HasColumnType("int");

                    b.Property<long?>("Options")
                        .HasColumnType("bigint");

                    b.Property<string>("ProcessHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessIdentifier")
                        .HasColumnType("int");

                    b.Property<int?>("Protection")
                        .HasColumnType("int");

                    b.Property<long?>("RegionSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Regkey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegkeyR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalNumberOfBytes")
                        .HasColumnType("float");

                    b.Property<long?>("TotalNumberOfFreeBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MarkCall_Id");

                    b.ToTable("MarkArguments");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Api")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mark_Id")
                        .HasColumnType("int");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Mark_Id");

                    b.ToTable("MarkCalls");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkSection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Entropy")
                        .HasColumnType("bigint");

                    b.Property<int>("Mark_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Mark_Id");

                    b.ToTable("MarkSections");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuckooStatic_Id")
                        .HasColumnType("int");

                    b.Property<string>("Dll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooStatic_Id");

                    b.ToTable("PeExports");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuckooStatic_Id")
                        .HasColumnType("int");

                    b.Property<string>("Dll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooStatic_Id");

                    b.ToTable("PeImports");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeResource", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filetype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Offset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Static_Id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Static_Id");

                    b.ToTable("PeResources");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Entropy")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Static_Id")
                        .HasColumnType("int");

                    b.Property<string>("VirtualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Static_Id");

                    b.ToTable("PeSections");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.ProcessTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Behavior_Id")
                        .HasColumnType("int");

                    b.Property<string>("CommandLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FirstSeen")
                        .HasColumnType("float");

                    b.Property<long>("Pid")
                        .HasColumnType("bigint");

                    b.Property<long>("Ppid")
                        .HasColumnType("bigint");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Track")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Behavior_Id");

                    b.ToTable("ProcessTrees");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.SignatureReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuckooSignature_Id")
                        .HasColumnType("int");

                    b.Property<string>("References")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooSignature_Id");

                    b.ToTable("SignatureReferences");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.StaticKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuckooStatic_Id")
                        .HasColumnType("int");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuckooStatic_Id");

                    b.ToTable("StaticKeys");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.StaticSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Static_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Static_Id");

                    b.ToTable("StaticSignatures");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.TargetPids", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Target_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Target_Id");

                    b.ToTable("TargetPids");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.TargetUrls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Target_Id")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Target_Id");

                    b.ToTable("TargetUrls");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.YaraDropped", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dropped_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("crc32")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Dropped_Id");

                    b.ToTable("YaraDroppeds");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Malware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MD5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MalwareLevel")
                        .HasColumnType("int");

                    b.Property<int>("MalwareStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SHA256")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Malwares");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ScreenShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Malware_Id")
                        .HasColumnType("int");

                    b.Property<string>("PathFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Malware_Id");

                    b.ToTable("ScreenShots");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCDomains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowd_Id");

                    b.ToTable("TCDomains");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCEmails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowd_Id");

                    b.ToTable("TCEmails");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCHashes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThreatCrowdInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowdInfoId");

                    b.ToTable("TCHashes");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCIps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowd_Id");

                    b.ToTable("TCIps");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowd_Id");

                    b.ToTable("TCReferences");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastResolved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThreatCrowdInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowdInfoId");

                    b.ToTable("TCResolutions");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCScans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Scan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowd_Id");

                    b.ToTable("TCScans");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCSubdomanins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subdomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThreatCrowdInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ThreatCrowd_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreatCrowdInfoId");

                    b.ToTable("TCSubdomanins");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Malware_Id")
                        .HasColumnType("int");

                    b.Property<string>("Permalink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Malware_Id");

                    b.ToTable("ThreatCrowdInfo");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VirusTotalId")
                        .HasColumnType("int");

                    b.Property<int>("VirusTotal_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VirusTotalId");

                    b.ToTable("VirusTotalComments");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MD5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Malware_Id")
                        .HasColumnType("int");

                    b.Property<int>("Positives")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Malware_Id");

                    b.ToTable("VirusTotalInfos");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalScans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Detected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VirusTotal_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VirusTotal_Id");

                    b.ToTable("VirusTotalScans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Comment", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Malware", "Malware")
                        .WithMany()
                        .HasForeignKey("Malware_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.BehaviorSummary", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooBehavior", "CuckooBehavior")
                        .WithMany("Summary")
                        .HasForeignKey("Behavior_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooBehavior", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckooInfo")
                        .WithMany()
                        .HasForeignKey("CuckooInfoId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooDropped", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckoInfo")
                        .WithMany()
                        .HasForeignKey("CuckooScanId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooInfo", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Malware", "Malware")
                        .WithMany()
                        .HasForeignKey("MalwareId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooSignature", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckooInfo")
                        .WithMany()
                        .HasForeignKey("CuckooScanId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooStatic", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckooInfo")
                        .WithMany()
                        .HasForeignKey("CuckooScanId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooStrings", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckooInfo")
                        .WithMany()
                        .HasForeignKey("CuckoScanId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.CuckooTarget", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooInfo", "CuckooInfo")
                        .WithMany()
                        .HasForeignKey("CuckoScanId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.DroppedPids", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooDropped", "CuckooDropped")
                        .WithMany("Pids")
                        .HasForeignKey("Dropped_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.DroppedUrls", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooDropped", "CuckooDropped")
                        .WithMany("Urls")
                        .HasForeignKey("CuckooDroppedId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Exports", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.PeExport", "PeExport")
                        .WithMany("Exports")
                        .HasForeignKey("PeExport_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Imports", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.PeImport", "PeImport")
                        .WithMany("Imports")
                        .HasForeignKey("PeImport_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.Mark", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooSignature", "CuckooSignature")
                        .WithMany("Marks")
                        .HasForeignKey("Siganture_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkArguments", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.MarkCall", "MarkCall")
                        .WithMany("Arguments")
                        .HasForeignKey("MarkCall_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkCall", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.Mark", "Mark")
                        .WithMany("Call")
                        .HasForeignKey("Mark_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.MarkSection", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.Mark", "Mark")
                        .WithMany("MarkSection")
                        .HasForeignKey("Mark_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeExport", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("PeExport")
                        .HasForeignKey("CuckooStatic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeImport", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("PeImports")
                        .HasForeignKey("CuckooStatic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeResource", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("PeResources")
                        .HasForeignKey("Static_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.PeSection", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("PeSections")
                        .HasForeignKey("Static_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.ProcessTree", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooBehavior", "CuckooBehavior")
                        .WithMany("Processtree")
                        .HasForeignKey("Behavior_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.SignatureReferences", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooSignature", "CuckooSignature")
                        .WithMany("References")
                        .HasForeignKey("CuckooSignature_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.StaticKeys", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("Keys")
                        .HasForeignKey("CuckooStatic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.StaticSignature", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooStatic", "CuckooStatic")
                        .WithMany("Signatures")
                        .HasForeignKey("Static_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.TargetPids", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooTarget", "CuckooTarget")
                        .WithMany("Pids")
                        .HasForeignKey("Target_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.TargetUrls", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooTarget", "CuckooTarget")
                        .WithMany("Urls")
                        .HasForeignKey("Target_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Cuckoo.YaraDropped", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Cuckoo.CuckooDropped", "CuckooDropped")
                        .WithMany("YaraDroppeds")
                        .HasForeignKey("Dropped_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.Malware", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ApplicationUser", "User")
                        .WithMany("Malwares")
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ScreenShot", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Malware", "Malware")
                        .WithMany()
                        .HasForeignKey("Malware_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCDomains", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Domains")
                        .HasForeignKey("ThreatCrowd_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCEmails", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Emails")
                        .HasForeignKey("ThreatCrowd_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCHashes", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Hashes")
                        .HasForeignKey("ThreatCrowdInfoId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCIps", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Ips")
                        .HasForeignKey("ThreatCrowd_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCReferences", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("References")
                        .HasForeignKey("ThreatCrowd_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCResolution", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("TCResolutions")
                        .HasForeignKey("ThreatCrowdInfoId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCScans", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Scans")
                        .HasForeignKey("ThreatCrowd_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.TCSubdomanins", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", "ThreatCrowdInfo")
                        .WithMany("Subdomains")
                        .HasForeignKey("ThreatCrowdInfoId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.ThreatCrowd.ThreatCrowdInfo", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Malware", "Malware")
                        .WithMany()
                        .HasForeignKey("Malware_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalComments", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.VirusTotal.VirusTotalInfo", "VirusTotal")
                        .WithMany("Comments")
                        .HasForeignKey("VirusTotalId");
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalInfo", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.Malware", "Malware")
                        .WithMany()
                        .HasForeignKey("Malware_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinal.CORE.VirusTotal.VirusTotalScans", b =>
                {
                    b.HasOne("ProyectoFinal.CORE.VirusTotal.VirusTotalInfo", "VirusTotal")
                        .WithMany("Scans")
                        .HasForeignKey("VirusTotal_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
