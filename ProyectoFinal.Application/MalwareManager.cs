using System;
using ProyectoFinal.CORE;
using ProyectoFinal.CORE.Contracts;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Linq;

namespace ProyectoFinal.Application
{
    public class MalwareManager: GenericManager<Malware>, IMalwareManager
    {
        /// <summary>
        /// Constructor de MlawareManager
        /// </summary>
        /// <param name="context"></param>
        public MalwareManager(IApplicationDbContext context) : base(context)
        {
        }
        
        /// <summary>
        /// Calcula el hash md5 del archivo pasado
        /// </summary>
        /// <param name="filename"></param>
        /// <returns>hash md5</returns>
        public string checkMD5(string filename)
        {
            using (var md5 = MD5.Create())
            {
                using (var stream = System.IO.File.OpenRead(filename))
                {
                    var hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                   
                }
            }
        }

        /// <summary>
        /// Calcula el hash sha256 del archivo pasado
        /// </summary>
        /// <param name="filename"></param>
        /// <returns>hash md5</returns>
        public string checkSHA(string filename)
        {
            using (var sha = SHA256.Create())
            {
                using (var stream = System.IO.File.OpenRead(filename))
                {
                    var hash = sha.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// Obtiene una entidad por el md5
        /// </summary>
        /// <param name="md5">md5</param>
        /// <returns>entidad</returns>
        public IQueryable<Malware> GetByMd5(string md5)
        {
            return Context.Set<Malware>().Where(e => e.MD5 == md5);

        }



    }
}
