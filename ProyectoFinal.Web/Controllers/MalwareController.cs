using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ProyectoFinal.CORE;
using ProyectoFinal.CORE.Contracts;

namespace ProyectoFinal.Web.Controllers
{
    public class MalwareController : Controller
    {

        IMalwareManager malwareManager = null;
        ILogger<MalwareController> _log = null;

        /// <summary>
        /// Constructor de malware controller 
        /// </summary>
        /// <param name="malwareManager"></param>
        /// <param name="log"></param>
        public MalwareController(IMalwareManager malwareManager, ILogger<MalwareController> log)
        {
            this.malwareManager = malwareManager;
            _log = log;
        }

        /// <summary>
        /// Metodo que carga la vista index que muestra los malware subidos por fecha desc.
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            try
            {
                //obtenemos lso malware subidos a la plataforma
                var model = malwareManager.GetAll().Select(e => new CORE.Malware
                {
                    Id = e.Id,
                    Name = e.Name,
                    Date = e.Date,
                    FileName = e.FileName,
                    Url = e.Url,
                    MD5 = e.MD5,
                    SHA256 = e.SHA256,
                    MalwareLevel = e.MalwareLevel,
                    MalwareStatus = e.MalwareStatus

                });

                if (model != null)
                {
                    return View(model);
                }
                else
                {
                    TempData["vacio"] = "No se han obtenido muestras subidas a la plataforma";
                    return View();
                }

                
            }
            catch(Exception ex)
            {
                //guardamso log si se produce una excepcion
                _log.LogError(ex.Message, ex);
                return View();
            }
            
        }


        public IActionResult Search(IEnumerable<Malware?> malware)
        {
            if (malware.Count() != 0)
            {
                return View(malware);
            }
            else
            {
                
                return View();
            }
            
        }

        [HttpPost]
        public IActionResult Search(IFormCollection form)
        {
            try
            {

                var search = form["search"].ToString();
                var option = form["option"].ToString();

                if (search != "")
                {
                    switch (option)
                    {
                        case "name":
                            var result = malwareManager.GetAll().Where(e => e.Name.Contains(search));
                            return View(result);
                        case "file":
                            var result2 = malwareManager.GetAll().Where(e => e.FileName.Contains(search));
                            return View(result2);
                        case "md5":
                            var result3 = malwareManager.GetAll().Where(e => e.MD5 == search);
                            return View(result3);
                        case "sha256":
                            var result4 = malwareManager.GetAll().Where(e => e.SHA256 == search);
                            return View(result4);
                    }

                    return View();
                }
                else
                {
                    TempData["vacio"] = "El campo de búsqueda esta en blanco, vuelva a intentarlo de nuevo";
                    return View();
                }            

                
            }
            catch (Exception ex)
            {
                //guardamso log si se produce una excepcion
                _log.LogError(ex.Message, ex);
                return View();
            }
        }
    }
}
