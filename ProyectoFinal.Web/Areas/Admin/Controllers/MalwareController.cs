using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using ProyectoFinal.CORE;
using ProyectoFinal.CORE.Contracts;
using ProyectoFinal.Web.Areas.Admin.Models;

// For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace ProyectoFinal.Web.Areas.Admin.Controllers
{
    [Authorize(Roles = "Admin")]
    [Area("Admin")]
    public class MalwareController : Controller
    {

        IMalwareManager malwareManager = null;
        ILogger<MalwareController> _log = null;
        IUserManager usrManager = null;
        IRoleManager roleManager = null;
        UserManager<ApplicationUser> _userManager = null;

        /// <summary>
        /// Constructor de malware controller 
        /// </summary>
        /// <param name="malwareManager"></param>
        /// <param name="log"></param>
        public MalwareController(IMalwareManager malwareManager, ILogger<MalwareController> log, IUserManager usrManager,
            UserManager<ApplicationUser> userManager)
        {
            this.malwareManager = malwareManager;
            this.usrManager = usrManager;
            _userManager = userManager;
            _log = log;
        }

        /// <summary>
        /// Metodo que muestra los malware en la vista del admin malware
        /// </summary>
        /// <returns>vista</returns>
        public IActionResult Index()
        {
            try
            {
                //obtenemos lso malware subidos a la plataforma
                var model = malwareManager.GetAll().Select(e => new CORE.Malware
                {
                    Id = e.Id,
                    User = e.User,
                    Name = e.Name,
                    Date = e.Date,
                    FileName = e.FileName,
                    Url = e.Url,
                    MD5 = e.MD5,
                    SHA256 = e.SHA256,
                    MalwareLevel = e.MalwareLevel,
                    MalwareStatus = e.MalwareStatus

                });

                if (model != null)
                {
                    return View(model);
                }
                else
                {
                    TempData["vacio"] = "No se han obtenido muestras subidas a la plataforma";
                    return View();
                }


            }
            catch (Exception ex)
            {
                //guardamso log si se produce una excepcion
                _log.LogError(ex.Message, ex);
                return View();
            }
        }

        public IActionResult Edit(string id)
        {
            try
            {
                //verificamos que el id no este vacio
                if (id != null)
                {
                    //obtenemos el malware
                    var malware = malwareManager.GetByMd5(id);
                    //si elmalware no esta vacio generamos el model
                    if (malware != null)
                    {
                        //Obtenemos los usuarios y los pasamos a una lista
                        var users = usrManager.GetAll().Select(e => new UserList
                        {
                            Id = e.Id.ToString(),
                            UserName = e.UserName
                        }).ToList();

                        var userList = new List<SelectListItem>();

                        foreach (var item in users)
                        {
                            userList.Add(new SelectListItem { Text = item.UserName, Value = item.Id });
                        }

                        var model = new MalwareEditViewModel
                        {
                            UserList = userList,
                            Malware = new Malware
                            {
                                Id = malware.Id,
                                Name = malware.Name,
                                Date = malware.Date,
                                User = malware.User,
                                User_Id = malware.User_Id,
                                MalwareStatus = malware.MalwareStatus,
                                MalwareLevel = malware.MalwareLevel,
                                MD5 = malware.MD5

                            },

                        };

                        return View(model);
                    }
                    //si el malware no existe redirigimos a index
                    else
                    {
                        return RedirectToAction("Index");
                    }

                }
                else
                {
                    return RedirectToAction("Index");
                }

            }
            catch (Exception ex)
            {
                _log.LogError(ex.Message, ex);
                return RedirectToAction("Index");
            }
        }

        [HttpPost]
        public IActionResult Edit(string id, MalwareEditViewModel model)
        {
            try
            {
                //verificamos que el id no este vacio
                if (id != null)
                {
                    //obtenemos el malware
                    var malware = malwareManager.GetByMd5(id);
                    //si elmalware no esta vacio generamos el model
                    if (malware != null)
                    {
                        malware.Name = model.Malware.Name;
                        malware.Date = model.Malware.Date;
                        malware.MalwareLevel = model.Malware.MalwareLevel;
                        malware.MalwareStatus = model.Malware.MalwareStatus;
                        malware.User_Id = model.Malware.User_Id;
                        malwareManager.Context.SaveChanges();
                        TempData["editado"] = "El malware se ha editado correctamente";
                        _log.LogInformation("Malware editado correctamente: Id " + id.ToString());
                        return RedirectToAction("Index");
                    }
                    //si el malware no existe redirigimos a index
                    else
                    {
                        return RedirectToAction("Index");
                    }

                }
                else
                {
                    return RedirectToAction("Index");
                }

            }
            catch (Exception ex)
            {
                _log.LogError(ex.Message, ex);
                return RedirectToAction("Index");
            }
        }

        public IActionResult Delete(string id)
        {
            try
            {
                var malware = malwareManager.GetByMd5(id);
                if (malware != null)
                {
                    Malware model = new Malware
                    {
                        Id = malware.Id,
                        User = malware.User,
                        MD5 = malware.MD5,
                        SHA256 = malware.SHA256,
                        MalwareLevel = malware.MalwareLevel,
                        MalwareStatus = malware.MalwareStatus,
                        Date = malware.Date
                    };
                    return View(model);
                }
                else
                {
                    return RedirectToAction("Index");
                }
            }
            catch (Exception e)
            {
                _log.LogError(e.Message, e);
                return RedirectToAction("Index");
            }
        }

        [HttpPost]
        public IActionResult Delete(string id, IFormCollection form)
        {
            try
            {
                var malware = malwareManager.GetByMd5(id);
                if (malware != null)
                {
                    malwareManager.Remove(malware);
                    malwareManager.Context.SaveChanges();
                }
                TempData["borrado"] = "El malware se ha borrado correctamente";
                _log.LogInformation("Malware eliminado correctamente: Id " + id.ToString());
                return RedirectToAction("Index");

            }
            catch (Exception ex)
            {
                _log.LogError(ex.Message, ex);
                return View();
            }

        }
    }
}
